name: flutter-tool

dep:
  ops:
    type: git
    url: "https://github.com/hatlonely/ops.git"
    version: master

env:
  default:
    NAME: "flutter-tool"
    IMAGE_REPOSITORY: "flutter-tool"
    IMAGE_TAG: "$(git describe --tags | awk '{print(substr($0,2,length($0)))}')"
    FLUTTER_ROOT: "flutter_tool"
  dev:
    K8S_CONTEXT: "home-k8s"
    NAMESPACE: "dev"
    REGISTRY_ENDPOINT: "{{.registry.aliyun.endpoint}}"
    REGISTRY_USERNAME: "{{.registry.aliyun.username}}"
    REGISTRY_PASSWORD: "{{.registry.aliyun.password}}"
    REGISTRY_NAMESPACE: "{{.registry.aliyun.namespace}}"
    PULL_SECRET_NAME: "hatlonely-pull-secret"
    REPLICA_COUNT: 2
    INGRESS_HOST: "k8s.tool.hatlonely.com"
    SECRET_NAME: "k8s-secret"
  ali:
    K8S_CONTEXT: "weboffice-regression"
    NAMESPACE: "hatlonely"
    REGISTRY_ENDPOINT: "{{.registry.aliyun.endpoint}}"
    REGISTRY_USERNAME: "{{.registry.aliyun.username}}"
    REGISTRY_PASSWORD: "{{.registry.aliyun.password}}"
    REGISTRY_NAMESPACE: "{{.registry.aliyun.namespace}}"
    PULL_SECRET_NAME: "hatlonely-pull-secret"
    REPLICA_COUNT: 2
    INGRESS_HOST: "k8s.tool.c646969cbbabb4eb4ac9d7b10cb5d87ed.cn-shanghai.alicontainer.com"
    SECRET_NAME: "k8s-secret"

task:
  namespace:
    step:
      - test "${K8S_CONTEXT}" == "$(kubectl config current-context)" || exit 1
      - kubectl get namespaces "${NAMESPACE}" 2>/dev/null 1>&2 || kubectl create namespace "${NAMESPACE}"
  pull-secret:
    step:
      - test "${K8S_CONTEXT}" == "$(kubectl config current-context)" || exit 1
      - |
        kubectl get secret "${PULL_SECRET_NAME}" -n "${NAMESPACE}" 2>/dev/null 1>&2 || { \
          kubectl create secret docker-registry ${PULL_SECRET_NAME} \
            --docker-server=${REGISTRY_ENDPOINT} \
            --docker-username=${REGISTRY_USERNAME} \
            --docker-password=${REGISTRY_PASSWORD} \
            --namespace=${NAMESPACE}
        }
  fonts:
    step:
      - mkdir -p ${TMP}/assets/fonts && mkdir -p ${FLUTTER_ROOT}/assets/fonts
      - wget https://fonts.google.com/download?family=Roboto -O ${TMP}/assets/fonts/Roboto.zip
      - unzip -o ${TMP}/assets/fonts/Roboto.zip -d ${FLUTTER_ROOT}/assets/fonts/Roboto
      - wget https://fonts.google.com/download?family=Roboto%20Condensed -O ${TMP}/assets/fonts/RobotoCondensed.zip
      - unzip -o ${TMP}/assets/fonts/RobotoCondensed.zip -d ${FLUTTER_ROOT}/assets/fonts/RobotoCondensed
      - wget https://fonts.google.com/download?family=Source%20Code%20Pro -O ${TMP}/assets/fonts/SourceCodePro.zip
      - unzip -o ${TMP}/assets/fonts/SourceCodePro.zip -d ${FLUTTER_ROOT}/assets/fonts/SourceCodePro
      - wget https://fonts.google.com/download?family=Noto%20Sans%20SC -O ${TMP}/assets/fonts/NotoSansSC.zip
      - unzip -o ${TMP}/assets/fonts/NotoSansSC.zip -d ${FLUTTER_ROOT}/assets/fonts/NotoSansSC
      - wget https://fonts.google.com/download?family=Noto%20Serif%20SC -O ${TMP}/assets/fonts/NotoSerifSC.zip
      - unzip -o ${TMP}/assets/fonts/NotoSerifSC.zip -d ${FLUTTER_ROOT}/assets/fonts/NotoSerifSC
      - wget https://fonts.google.com/download?family=ZCOOL%20XiaoWei -O ${TMP}/assets/fonts/ZCOOLXiaoWei.zip
      - unzip -o ${TMP}/assets/fonts/ZCOOLXiaoWei.zip -d ${FLUTTER_ROOT}/assets/fonts/ZCOOLXiaoWei
      - wget https://github.com/adobe-fonts/source-han-sans/releases/download/2.004R/SourceHanSansSC.zip -O ${TMP}/assets/fonts/SourceHanSansSC.zip
      - unzip -o ${TMP}/assets/fonts/SourceHanSansSC.zip -d ${FLUTTER_ROOT}/assets/fonts/SourceHanSansSC
      - wget https://fonts.google.com/download?family=Cousine -O ${TMP}/assets/fonts/Cousine.zip
      - unzip -o ${TMP}/assets/fonts/Cousine.zip -d ${FLUTTER_ROOT}/assets/fonts/Cousine
  image:
    step:
      - docker build --tag="${REGISTRY_NAMESPACE}/${IMAGE_REPOSITORY}:${IMAGE_TAG}" .
      - docker login --username="${REGISTRY_USERNAME}" --password="${REGISTRY_PASSWORD}" "${REGISTRY_ENDPOINT}"
      - docker tag "${REGISTRY_NAMESPACE}/${IMAGE_REPOSITORY}:${IMAGE_TAG}" "${REGISTRY_ENDPOINT}/${REGISTRY_NAMESPACE}/${IMAGE_REPOSITORY}:${IMAGE_TAG}"
      - docker push "${REGISTRY_ENDPOINT}/${REGISTRY_NAMESPACE}/${IMAGE_REPOSITORY}:${IMAGE_TAG}"
  helm:
    args:
      cmd:
        type: string
        default: diff
        validation: x in ["diff", "install", "upgrade", "delete"]
    step:
      - test "${K8S_CONTEXT}" == "$(kubectl config current-context)" || exit 1
      - sh ${DEP}/ops/tool/render.sh ${DEP}/ops/helm/flutter-app ${TMP}/helm/${NAME}
      - sh ${DEP}/ops/tool/render.sh ops/helm ${TMP}/helm
      - |
        case "${cmd}" in
          "diff"|"") helm diff upgrade "${NAME}" -n "${NAMESPACE}" "${TMP}/helm/${NAME}" -f "${TMP}/helm/values-adapter.yaml" --allow-unreleased;;
          "install") helm install "${NAME}" -n "${NAMESPACE}" "${TMP}/helm/${NAME}" -f "${TMP}/helm/values-adapter.yaml";;
          "upgrade") helm upgrade "${NAME}" -n "${NAMESPACE}" "${TMP}/helm/${NAME}" -f "${TMP}/helm/values-adapter.yaml";;
          "delete") helm delete "${NAME}" -n "${NAMESPACE}";;
        esac
